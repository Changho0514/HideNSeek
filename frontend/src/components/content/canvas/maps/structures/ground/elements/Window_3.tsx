/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/object/Window_3.glb -t -o src/components/content/canvas/maps/structures/ground/elements/Window_3.tsx 
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { ObjectSettingType } from '../../../../../../../types/GameType';
import { useBox } from '@react-three/cannon';

type GLTFResult = GLTF & {
    nodes: {
        Mesh075: THREE.Mesh;
        Mesh075_1: THREE.Mesh;
    };
    materials: {
        Cartoon_Room_Glass: THREE.MeshStandardMaterial;
        Cartoon_Room_Mat: THREE.MeshStandardMaterial;
    };
};

export function Window_3(props: ObjectSettingType) {
    const { nodes, materials } = useGLTF(
        '/models/object/Window_3.glb'
    ) as GLTFResult;
    const [ref] = useBox<THREE.Mesh>(() => ({
        args: [6, 1.2, 4],
        mass: 0.1,
        position: props.position,
        rotation: props.rotation,
        linearFactor: [0, 0, 0], // 모든 축에 대해 이동 제한
        angularFactor: [0, 0, 0], // 모든 축에 대해 회전 제한
    }));
    return (
        <group position={[0, 0, 0]} dispose={null}>
            <group>
                <mesh
                    ref={ref}
                    geometry={nodes.Mesh075.geometry}
                    material={materials.Cartoon_Room_Glass}
                    position={props.position}
                    rotation={props.rotation}
                    scale={0.025}
                />
                <mesh
                    geometry={nodes.Mesh075_1.geometry}
                    material={materials.Cartoon_Room_Mat}
                    position={props.position}
                    rotation={props.rotation}
                    scale={0.025}
                />
            </group>
        </group>
    );
}

useGLTF.preload('/models/object/Window_3.glb');
