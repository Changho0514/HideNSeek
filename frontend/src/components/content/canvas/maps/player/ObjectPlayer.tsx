/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/CubeGuyCharacter.glb -t -o src/components/content/canvas/maps/player/Man.tsx 
*/

import * as THREE from 'three';
import React from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { PlayerInitType } from '../../../../../types/GameType';
import { NicknameBoard } from '../structures/ground/3DUIs/NicknameBoard';
import { useObject } from './hooks/useObject';

type GLTFResult = GLTF & {
    nodes: {
        Character: THREE.SkinnedMesh;
        Root: THREE.Bone;
    };
    materials: {
        Atlas: THREE.MeshStandardMaterial;
    };
    animations: GLTFAction[];
};

type ActionName = '';
interface GLTFAction extends THREE.AnimationClip {
    name: ActionName;
}

type ContextType = Record<
    string,
    React.ForwardRefExoticComponent<
        JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']
    >
>;

export function ObjectPlayer({
    player,
    position,
    modelIndex: mIdx,
}: PlayerInitType) {
    const modelIndex = mIdx ?? player.selectedIndex;
    const {
        me,
        playerRef,
        memoizedPosition,
        playerId,
        scene,
        nicknameRef,
        scale,
    } = useObject({
        player,
        position,
        modelIndex,
    });

    return (
        <>
            {me && (
                <NicknameBoard ref={nicknameRef} text={`${player?.nickname}`} />
            )}
            <primitive
                ref={playerRef}
                visible
                scale={scale}
                name={playerId ?? ''}
                position={memoizedPosition}
                dispose={null}
                object={scene}
            ></primitive>
        </>
    );
}

useGLTF.preload('/models/CubeGuyCharacter.glb');
